     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				; 这个程序是给486用的哦
     6 00000000                                 [BITS 32]						; 制作32位模式用的机械语言
     7 00000000                                 ; 制作目标文件的信息
     8 00000000                                 [FILE "naskfunc.nas"]			; 源文件名信息
     9 00000000                                 
    10 00000000                                 
    11 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    12 00000000                                 		GLOBAL  _io_in8, _io_in16, _ioin32
    13 00000000                                 		GLOBAL  _io_out8, _io_out16, _io_out32
    14 00000000                                 		GLOBAL  _io_load_eflags, _io_store_eflags
    15 00000000                                 		GLOBAL  _load_gdtr, _load_idtr
    16 00000000                                 		GLOBAL 	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    17 00000000                                 		EXTERN _inthandler21, _inthandler27, _inthandler2c
    18 00000000                                 
    19 00000000                                 ; 以下是实际的函数
    20 00000000                                 
    21                                          [SECTION .text]		; 目标文件中写了这些之后再写程序
    22 00000000                                 
    23 00000000                                 _io_hlt:			; void io_hlt(void);
    24 00000000 F4                              		HLT
    25 00000001 C3                              		RET
    26 00000002                                 		
    27 00000002                                 _io_cli:			; void io_cli(void)
    28 00000002 FA                              		CLI
    29 00000003 C3                              		RET
    30 00000004                                 		
    31 00000004                                 _io_sti:			; void io_sti(void)
    32 00000004 FB                              		STI
    33 00000005 C3                              		RET
    34 00000006                                 		
    35 00000006                                 _io_stihlt:			; void io_stihlt(void)
    36 00000006 FB                              		STI
    37 00000007 F4                              		HLT
    38 00000008 C3                              		RET
    39 00000009                                 		
    40 00000009                                 _io_in8:			; int io_in8(int port)
    41 00000009 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    42 0000000D B8 00000000                     		MOV		EAX, 0
    43 00000012 EC                              		IN		AL,DX
    44 00000013 C3                              		RET
    45 00000014                                 		
    46 00000014                                 _io_in16:			; int io_in16(int port)
    47 00000014 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    48 00000018 B8 00000000                     		MOV 	EAX, 0
    49 0000001D 66 ED                           		IN		AX, DX
    50 0000001F C3                              		RET
    51 00000020                                 		
    52 00000020                                 _io_in32:			; int io_in32(int port)
    53 00000020 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    54 00000024 ED                              		IN		EAX, DX
    55 00000025 C3                              		RET
    56 00000026                                 		
    57 00000026                                 _io_out8:			; void io_out8(int port, int data)
    58 00000026 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    59 0000002A 8A 44 24 08                     		MOV		AL, [ESP+8]		; data
    60 0000002E EE                              		OUT		DX, AL
    61 0000002F C3                              		RET
    62 00000030                                 		
    63 00000030                                 _io_out16:			; void io_out16(int port, int data)
    64 00000030 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    65 00000034 8B 44 24 08                     		MOV		EAX, [ESP+8]	; data
    66 00000038 66 EF                           		OUT		DX, AX
    67 0000003A C3                              		RET
    68 0000003B                                 		
    69 0000003B                                 _io_out32:			; void io_out32(int port, int data)
    70 0000003B 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    71 0000003F 8B 44 24 08                     		MOV		EAX, [ESP+8]	; data
    72 00000043 EF                              		OUT		DX, EAX
    73 00000044 C3                              		RET
    74 00000045                                 
    75 00000045                                 _io_load_eflags:	; int io_load_eflags(void)
    76 00000045 9C                              		PUSHFD		; 指PUSH EFLAGS
    77 00000046 58                              		POP		EAX
    78 00000047 C3                              		RET
    79 00000048                                 
    80 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    81 00000048 8B 44 24 04                     		MOV 	EAX, [ESP+4]
    82 0000004C 50                              		PUSH	EAX
    83 0000004D 9D                              		POPFD		; 指POP EFLAGS
    84 0000004E C3                              		RET
    85 0000004F                                 
    86 0000004F                                 _load_gdtr:			; void load_gdtr(int limit, int addr);
    87 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    88 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    89 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    90 0000005E C3                              		RET
    91 0000005F                                 		
    92 0000005F                                 _load_idtr:			; void load_idtr(int limit, int addr);
    93 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    94 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    95 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    96 0000006E C3                              		RET
    97 0000006F                                 
    98 0000006F                                 _asm_inthandler21:
    99 0000006F 06                              		PUSH	ES
   100 00000070 1E                              		PUSH	DS
   101 00000071 60                              		PUSHAD
   102 00000072 89 E0                           		MOV		EAX,ESP
   103 00000074 50                              		PUSH	EAX
   104 00000075 66 8C D0                        		MOV		AX,SS
   105 00000078 8E D8                           		MOV		DS,AX
   106 0000007A 8E C0                           		MOV		ES,AX
   107 0000007C E8 [00000000]                   		CALL	_inthandler21
   108 00000081 58                              		POP		EAX
   109 00000082 61                              		POPAD
   110 00000083 1F                              		POP		DS
   111 00000084 07                              		POP		ES
   112 00000085 CF                              		IRETD
   113 00000086                                 
   114 00000086                                 _asm_inthandler27:
   115 00000086 06                              		PUSH	ES
   116 00000087 1E                              		PUSH	DS
   117 00000088 60                              		PUSHAD
   118 00000089 89 E0                           		MOV		EAX,ESP
   119 0000008B 50                              		PUSH	EAX
   120 0000008C 66 8C D0                        		MOV		AX,SS
   121 0000008F 8E D8                           		MOV		DS,AX
   122 00000091 8E C0                           		MOV		ES,AX
   123 00000093 E8 [00000000]                   		CALL	_inthandler27
   124 00000098 58                              		POP		EAX
   125 00000099 61                              		POPAD
   126 0000009A 1F                              		POP		DS
   127 0000009B 07                              		POP		ES
   128 0000009C CF                              		IRETD
   129 0000009D                                 
   130 0000009D                                 _asm_inthandler2c:
   131 0000009D 06                              		PUSH	ES
   132 0000009E 1E                              		PUSH	DS
   133 0000009F 60                              		PUSHAD
   134 000000A0 89 E0                           		MOV		EAX,ESP
   135 000000A2 50                              		PUSH	EAX
   136 000000A3 66 8C D0                        		MOV		AX,SS
   137 000000A6 8E D8                           		MOV		DS,AX
   138 000000A8 8E C0                           		MOV		ES,AX
   139 000000AA E8 [00000000]                   		CALL	_inthandler2c
   140 000000AF 58                              		POP		EAX
   141 000000B0 61                              		POPAD
   142 000000B1 1F                              		POP		DS
   143 000000B2 07                              		POP		ES
   144 000000B3 CF                              		IRETD
